{"ast":null,"code":"import _regeneratorRuntime from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\n\nvar getWeb3 = function getWeb3() {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var provider, web3, _web, _provider, _web2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Modern dapp browsers...\n              if (window.ethereum) {\n                provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\");\n                web3 = new Web3(provider);\n                resolve(web3);\n              } // Legacy dapp browsers...\n              else if (window.web3) {\n                  // Use Mist/MetaMask's provider.\n                  _web = window.web3;\n                  console.log(\"Injected web3 detected.\");\n                  resolve(_web);\n                } // Fallback to localhost; use dev console port by default...\n                else {\n                    _provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\");\n                    _web2 = new Web3(_provider);\n                    console.log(\"No web3 instance injected, using Local web3.\");\n                    resolve(_web2);\n                  }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n  });\n};\n\nexport default getWeb3;","map":{"version":3,"sources":["/home/buidl-test1/enigma-test/millionaires_problem_demo/client/src/utils/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","provider","providers","HttpProvider","web3","console","log"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SACd,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB;AAAA;AAAA;AAAA;AAAA,6BAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC9B;AACA,kBAAID,MAAM,CAACE,QAAX,EAAqB;AACXC,gBAAAA,QADW,GACA,IAAIR,IAAI,CAACS,SAAL,CAAeC,YAAnB,CACb,uBADa,CADA;AAIXC,gBAAAA,IAJW,GAIJ,IAAIX,IAAJ,CAASQ,QAAT,CAJI;AAKjBL,gBAAAA,OAAO,CAACQ,IAAD,CAAP;AACH,eAND,CAOA;AAPA,mBAQK,IAAIN,MAAM,CAACM,IAAX,EAAiB;AACpB;AACMA,kBAAAA,IAFc,GAEPN,MAAM,CAACM,IAFA;AAGpBC,kBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAV,kBAAAA,OAAO,CAACQ,IAAD,CAAP;AACD,iBALI,CAML;AANK,qBAOA;AACGH,oBAAAA,SADH,GACc,IAAIR,IAAI,CAACS,SAAL,CAAeC,YAAnB,CACf,uBADe,CADd;AAIGC,oBAAAA,KAJH,GAIU,IAAIX,IAAJ,CAASQ,SAAT,CAJV;AAKHI,oBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAV,oBAAAA,OAAO,CAACQ,KAAD,CAAP;AACD;;AAxB6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AA0BD,GA5BD,CADc;AAAA,CAAhB;;AA+BA,eAAeV,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n          const provider = new Web3.providers.HttpProvider(\n              \"http://127.0.0.1:9545\"\n          );\n          const web3 = new Web3(provider);\n          resolve(web3);\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}