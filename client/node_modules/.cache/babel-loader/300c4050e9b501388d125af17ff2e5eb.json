{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form'; // Responds to initializeEnigma action to save enigma-js client library object\n\nvar initializeEnigmaReducer = function initializeEnigmaReducer() {\n  var enigma = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ENIGMA_INITIALIZED') {\n    return action.payload;\n  }\n\n  return enigma;\n}; // Responds to initializeAccounts action to save web3 accounts\n\n\nvar initializeAccountsReducer = function initializeAccountsReducer() {\n  var accounts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ACCOUNTS_INITIALIZED') {\n    return action.payload;\n  }\n\n  return accounts;\n}; // Responds to deployMillionairesProblem action to save deployed Millionaires' Problem secret contract address\n\n\nvar deployedMillionairesProblemReducer = function deployedMillionairesProblemReducer() {\n  var deployedMillionairesProblem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'MILLIONAIRES_PROBLEM_DEPLOYED') {\n    return action.payload;\n  }\n\n  return deployedMillionairesProblem;\n}; // Responds to computeRichestMillionaire action to save richest millionaire's address\n\n\nvar computeRichestMillionaireReducer = function computeRichestMillionaireReducer() {\n  var richestMillionaire = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'RICHEST_MILLIONAIRE_COMPUTED') {\n    return action.payload;\n  }\n\n  return richestMillionaire;\n}; // Responds to notifyMessage action to save snackbar open status and any contained message\n\n\nvar notifyMessageReducer = function notifyMessageReducer() {\n  var notification = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    open: false,\n    message: ''\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'MESSAGE_NOTIFIED') {\n    return action.payload;\n  }\n\n  return notification;\n}; // Combine reducers to state variables named by the keys here; includes a redux-form reducer\n\n\nexport default combineReducers({\n  enigma: initializeEnigmaReducer,\n  accounts: initializeAccountsReducer,\n  deployedMillionairesProblem: deployedMillionairesProblemReducer,\n  richestMillionaire: computeRichestMillionaireReducer,\n  notification: notifyMessageReducer,\n  form: formReducer\n});","map":{"version":3,"sources":["/home/buidl-test1/enigma-test/millionaires_problem_demo/client/src/reducers/index.js"],"names":["combineReducers","reducer","formReducer","initializeEnigmaReducer","enigma","action","type","payload","initializeAccountsReducer","accounts","deployedMillionairesProblemReducer","deployedMillionairesProblem","computeRichestMillionaireReducer","richestMillionaire","notifyMessageReducer","notification","open","message","form"],"mappings":"AAAA,SAASA,eAAT,QAA+B,OAA/B;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,YAAvC,C,CAEA;;AACA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAA2B;AAAA,MAA1BC,MAA0B,uEAAjB,IAAiB;AAAA,MAAXC,MAAW;;AACvD,MAAIA,MAAM,CAACC,IAAP,KAAgB,oBAApB,EAA0C;AACtC,WAAOD,MAAM,CAACE,OAAd;AACH;;AAED,SAAOH,MAAP;AACH,CAND,C,CAQA;;;AACA,IAAMI,yBAAyB,GAAG,SAA5BA,yBAA4B,GAA2B;AAAA,MAA1BC,QAA0B,uEAAf,EAAe;AAAA,MAAXJ,MAAW;;AACzD,MAAIA,MAAM,CAACC,IAAP,KAAgB,sBAApB,EAA4C;AACxC,WAAOD,MAAM,CAACE,OAAd;AACH;;AAED,SAAOE,QAAP;AACH,CAND,C,CAQA;;;AACA,IAAMC,kCAAkC,GAAG,SAArCA,kCAAqC,GAAgD;AAAA,MAA/CC,2BAA+C,uEAAjB,IAAiB;AAAA,MAAXN,MAAW;;AACvF,MAAIA,MAAM,CAACC,IAAP,KAAgB,+BAApB,EAAqD;AACjD,WAAOD,MAAM,CAACE,OAAd;AACH;;AAED,SAAOI,2BAAP;AACH,CAND,C,CAQA;;;AACA,IAAMC,gCAAgC,GAAG,SAAnCA,gCAAmC,GAAuC;AAAA,MAAtCC,kBAAsC,uEAAjB,IAAiB;AAAA,MAAXR,MAAW;;AAC5E,MAAIA,MAAM,CAACC,IAAP,KAAgB,8BAApB,EAAoD;AAChD,WAAOD,MAAM,CAACE,OAAd;AACH;;AAED,SAAOM,kBAAP;AACH,CAND,C,CAQA;;;AACA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAuD;AAAA,MAAtDC,YAAsD,uEAAvC;AAACC,IAAAA,IAAI,EAAE,KAAP;AAAcC,IAAAA,OAAO,EAAE;AAAvB,GAAuC;AAAA,MAAXZ,MAAW;;AAChF,MAAIA,MAAM,CAACC,IAAP,KAAgB,kBAApB,EAAwC;AACpC,WAAOD,MAAM,CAACE,OAAd;AACH;;AAED,SAAOQ,YAAP;AACH,CAND,C,CAQA;;;AACA,eAAef,eAAe,CAAC;AAC3BI,EAAAA,MAAM,EAAED,uBADmB;AAE3BM,EAAAA,QAAQ,EAAED,yBAFiB;AAG3BG,EAAAA,2BAA2B,EAAED,kCAHF;AAI3BG,EAAAA,kBAAkB,EAAED,gCAJO;AAK3BG,EAAAA,YAAY,EAAED,oBALa;AAM3BI,EAAAA,IAAI,EAAEhB;AANqB,CAAD,CAA9B","sourcesContent":["import { combineReducers} from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\n// Responds to initializeEnigma action to save enigma-js client library object\nconst initializeEnigmaReducer = (enigma = null, action) => {\n    if (action.type === 'ENIGMA_INITIALIZED') {\n        return action.payload;\n    }\n\n    return enigma;\n};\n\n// Responds to initializeAccounts action to save web3 accounts\nconst initializeAccountsReducer = (accounts = [], action) => {\n    if (action.type === 'ACCOUNTS_INITIALIZED') {\n        return action.payload;\n    }\n\n    return accounts;\n};\n\n// Responds to deployMillionairesProblem action to save deployed Millionaires' Problem secret contract address\nconst deployedMillionairesProblemReducer = (deployedMillionairesProblem = null, action) => {\n    if (action.type === 'MILLIONAIRES_PROBLEM_DEPLOYED') {\n        return action.payload;\n    }\n\n    return deployedMillionairesProblem;\n};\n\n// Responds to computeRichestMillionaire action to save richest millionaire's address\nconst computeRichestMillionaireReducer = (richestMillionaire = null, action) => {\n    if (action.type === 'RICHEST_MILLIONAIRE_COMPUTED') {\n        return action.payload;\n    }\n\n    return richestMillionaire;\n};\n\n// Responds to notifyMessage action to save snackbar open status and any contained message\nconst notifyMessageReducer = (notification = {open: false, message: ''}, action) => {\n    if (action.type === 'MESSAGE_NOTIFIED') {\n        return action.payload;\n    }\n\n    return notification;\n};\n\n// Combine reducers to state variables named by the keys here; includes a redux-form reducer\nexport default combineReducers({\n    enigma: initializeEnigmaReducer,\n    accounts: initializeAccountsReducer,\n    deployedMillionairesProblem: deployedMillionairesProblemReducer,\n    richestMillionaire: computeRichestMillionaireReducer,\n    notification: notifyMessageReducer,\n    form: formReducer\n});\n"]},"metadata":{},"sourceType":"module"}