{"ast":null,"code":"import _objectWithoutProperties from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/buidl-test1/enigma-test/millionaires_problem_demo/client/src/components/MillionairesProblem.js\";\n// Imports - React\nimport React, { Component } from 'react'; // Imports - Redux\n\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form'; // Imports - Frameworks (Semantic-UI and Material-UI)\n\nimport { Message } from \"semantic-ui-react\";\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\nimport Select from \"@material-ui/core/Select/Select\";\nimport TextField from \"@material-ui/core/TextField/TextField\"; // Imports - Components\n\nimport Notifier, { openSnackbar } from \"./Notifier\"; // Imports - Reducers (Redux)\n\nimport { computeRichestMillionaire } from \"../actions\"; // Imports - enigma-js client library utility packages\n\nimport { utils, eeConstants } from 'enigma-js';\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nvar MillionairesProblem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MillionairesProblem, _Component);\n\n  function MillionairesProblem(props) {\n    var _this;\n\n    _classCallCheck(this, MillionairesProblem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MillionairesProblem).call(this, props));\n    _this.onAddMillionaire = _this.onAddMillionaire.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onComputeRichest = _this.onComputeRichest.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Redux form/material-ui render address select component\n\n\n  _createClass(MillionairesProblem, [{\n    key: \"onAddMillionaire\",\n    // Redux form callback when add millionaire info is submitted\n    value: function () {\n      var _onAddMillionaire = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var _this2 = this;\n\n        var millionaireAddress, millionaireNetWorth, taskFn, taskArgs, taskGasLimit, taskGasPx, task;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                millionaireAddress = _ref.millionaireAddress, millionaireNetWorth = _ref.millionaireNetWorth;\n                // Create compute task metadata\n                // computeTask(\n                //      fn - the signature of the function we are calling (Solidity-types, no spaces)\n                //      args - the args passed into our method w/ format [[arg_1, type_1], [arg_2, type_2], …, [arg_n, type_n]]\n                //      gasLimit - ENG gas units to be used for the computation task\n                //      gasPx - ENG gas price to be used for the computation task in grains format (10⁸)\n                //      sender - Ethereum address deploying the contract\n                //      scAddr - the secret contract address for which this computation task belongs to\n                // )\n                taskFn = 'add_millionaire(address,uint256)';\n                taskArgs = [[millionaireAddress, 'address'], [millionaireNetWorth, 'uint256']];\n                taskGasLimit = 10000000;\n                taskGasPx = utils.toGrains(1e-7);\n                _context.next = 7;\n                return new Promise(function (resolve, reject) {\n                  _this2.props.enigma.computeTask(taskFn, taskArgs, taskGasLimit, taskGasPx, millionaireAddress, _this2.props.deployedMillionairesProblem).on(eeConstants.SEND_TASK_INPUT_RESULT, function (result) {\n                    return resolve(result);\n                  }).on(eeConstants.ERROR, function (error) {\n                    return reject(error);\n                  });\n                });\n\n              case 7:\n                task = _context.sent;\n                openSnackbar({\n                  message: 'Task pending: adding millionaire'\n                });\n\n              case 9:\n                if (!(task.ethStatus === 1)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.next = 12;\n                return this.props.enigma.getTaskRecordStatus(task);\n\n              case 12:\n                task = _context.sent;\n                _context.next = 15;\n                return sleep(1000);\n\n              case 15:\n                _context.next = 9;\n                break;\n\n              case 17:\n                // ethStatus === 2 means task has successfully been computed and commited on Ethereum\n                task.ethStatus === 2 ? openSnackbar({\n                  message: 'Task succeeded: added millionaire'\n                }) : openSnackbar({\n                  message: 'Task failed: did not add millionaire'\n                });\n                this.props.reset('addMillionaire');\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function onAddMillionaire(_x) {\n        return _onAddMillionaire.apply(this, arguments);\n      }\n\n      return onAddMillionaire;\n    }() // Callback when compute richest button is clicked\n\n  }, {\n    key: \"onComputeRichest\",\n    value: function () {\n      var _onComputeRichest = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var taskFn, taskArgs, taskGasLimit, taskGasPx, task, richestMillionaireAddress;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Create compute task metadata\n                taskFn = 'compute_richest()';\n                taskArgs = [];\n                taskGasLimit = 10000000;\n                taskGasPx = utils.toGrains(1e-7);\n                _context2.next = 6;\n                return new Promise(function (resolve, reject) {\n                  _this3.props.enigma.computeTask(taskFn, taskArgs, taskGasLimit, taskGasPx, _this3.props.accounts[0], _this3.props.deployedMillionairesProblem).on(eeConstants.SEND_TASK_INPUT_RESULT, function (result) {\n                    return resolve(result);\n                  }).on(eeConstants.ERROR, function (error) {\n                    return reject(error);\n                  });\n                });\n\n              case 6:\n                task = _context2.sent;\n                openSnackbar({\n                  message: 'Task pending: computing richest millionaire'\n                });\n\n              case 8:\n                if (!(task.ethStatus === 1)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                _context2.next = 11;\n                return this.props.enigma.getTaskRecordStatus(task);\n\n              case 11:\n                task = _context2.sent;\n                _context2.next = 14;\n                return sleep(1000);\n\n              case 14:\n                _context2.next = 8;\n                break;\n\n              case 16:\n                if (!(task.ethStatus === 2)) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                openSnackbar({\n                  message: 'Task succeeded: computed richest millionaire'\n                }); // Get task result by passing in existing task - obtains the encrypted, abi-encoded output\n\n                _context2.next = 20;\n                return new Promise(function (resolve, reject) {\n                  _this3.props.enigma.getTaskResult(task).on(eeConstants.GET_TASK_RESULT_RESULT, function (result) {\n                    return resolve(result);\n                  }).on(eeConstants.ERROR, function (error) {\n                    return reject(error);\n                  });\n                });\n\n              case 20:\n                task = _context2.sent;\n                _context2.next = 23;\n                return this.props.enigma.decryptTaskResult(task);\n\n              case 23:\n                task = _context2.sent;\n                // Abi-decode the output to its desired components\n                richestMillionaireAddress = this.props.enigma.web3.eth.abi.decodeParameters([{\n                  type: 'address',\n                  name: 'richestMillionaire'\n                }], task.decryptedOutput).richestMillionaire;\n                this.props.computeRichestMillionaire(richestMillionaireAddress);\n                _context2.next = 29;\n                break;\n\n              case 28:\n                openSnackbar({\n                  message: 'Task failed: did not compute richest millionaire'\n                });\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function onComputeRichest() {\n        return _onComputeRichest.apply(this, arguments);\n      }\n\n      return onComputeRichest;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.deployedMillionairesProblem === null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, React.createElement(Message, {\n          color: \"red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, \"Millionaires' Problem secret contract not yet deployed...\"));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        spacing: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Millionaires Problem Secret Contract Address: \", this.props.deployedMillionairesProblem)), React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(Notifier, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Enter Millionaire Details\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(InputLabel, {\n        htmlFor: \"millionaire-address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Address\"), React.createElement(Field, {\n        name: \"millionaireAddress\",\n        component: MillionairesProblem.renderAddressInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), this.props.accounts.map(function (account, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: account,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, account);\n      }))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"millionaireNetWorth\",\n        component: MillionairesProblem.renderNetWorthInput,\n        label: \"Net Worth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.props.handleSubmit(this.onAddMillionaire),\n        variant: \"outlined\",\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Submit\"))))), React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Richest Millionaire\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, this.props.richestMillionaire !== null ? this.props.richestMillionaire : \"TBD\"), React.createElement(Button, {\n        onClick: this.onComputeRichest,\n        variant: \"contained\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Compute Richest\")))));\n    }\n  }], [{\n    key: \"renderAddressInput\",\n    value: function renderAddressInput(_ref2) {\n      var input = _ref2.input,\n          label = _ref2.label,\n          _ref2$meta = _ref2.meta,\n          touched = _ref2$meta.touched,\n          error = _ref2$meta.error,\n          children = _ref2.children,\n          custom = _objectWithoutProperties(_ref2, [\"input\", \"label\", \"meta\", \"children\"]);\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        error: touched && error,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Select, Object.assign({\n        native: true\n      }, input, custom, {\n        inputProps: {\n          name: 'millionaireAddress',\n          id: 'millionaire-address'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), children)));\n    } // Redux form/material-ui render net worth text field component\n\n  }, {\n    key: \"renderNetWorthInput\",\n    value: function renderNetWorthInput(_ref3) {\n      var label = _ref3.label,\n          input = _ref3.input,\n          _ref3$meta = _ref3.meta,\n          touched = _ref3$meta.touched,\n          invalid = _ref3$meta.invalid,\n          error = _ref3$meta.error,\n          custom = _objectWithoutProperties(_ref3, [\"label\", \"input\", \"meta\"]);\n\n      return React.createElement(TextField, Object.assign({\n        label: label,\n        type: \"number\",\n        placeholder: label,\n        error: touched && invalid,\n        helperText: touched && error\n      }, input, custom, {\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MillionairesProblem;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    enigma: state.enigma,\n    accounts: state.accounts,\n    deployedMillionairesProblem: state.deployedMillionairesProblem,\n    richestMillionaire: state.richestMillionaire\n  };\n};\n\nexport default connect(mapStateToProps, {\n  computeRichestMillionaire: computeRichestMillionaire\n})(reduxForm({\n  form: 'addMillionaire'\n})(MillionairesProblem));","map":{"version":3,"sources":["/home/buidl-test1/enigma-test/millionaires_problem_demo/client/src/components/MillionairesProblem.js"],"names":["React","Component","connect","Field","reduxForm","Message","Grid","Button","FormControl","InputLabel","Select","TextField","Notifier","openSnackbar","computeRichestMillionaire","utils","eeConstants","sleep","ms","Promise","resolve","setTimeout","MillionairesProblem","props","onAddMillionaire","bind","onComputeRichest","millionaireAddress","millionaireNetWorth","taskFn","taskArgs","taskGasLimit","taskGasPx","toGrains","reject","enigma","computeTask","deployedMillionairesProblem","on","SEND_TASK_INPUT_RESULT","result","ERROR","error","task","message","ethStatus","getTaskRecordStatus","reset","accounts","getTaskResult","GET_TASK_RESULT_RESULT","decryptTaskResult","richestMillionaireAddress","web3","eth","abi","decodeParameters","type","name","decryptedOutput","richestMillionaire","renderAddressInput","map","account","i","renderNetWorthInput","handleSubmit","input","label","meta","touched","children","custom","id","invalid","mapStateToProps","state","form"],"mappings":"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","sourcesContent":["// Imports - React\nimport React, { Component } from 'react';\n// Imports - Redux\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n// Imports - Frameworks (Semantic-UI and Material-UI)\nimport { Message } from \"semantic-ui-react\";\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\nimport Select from \"@material-ui/core/Select/Select\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\n// Imports - Components\nimport Notifier, {openSnackbar} from \"./Notifier\";\n// Imports - Reducers (Redux)\nimport { computeRichestMillionaire } from \"../actions\";\n// Imports - enigma-js client library utility packages\nimport { utils, eeConstants } from 'enigma-js';\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass MillionairesProblem extends Component {\n    constructor(props) {\n        super(props);\n        this.onAddMillionaire = this.onAddMillionaire.bind(this);\n        this.onComputeRichest = this.onComputeRichest.bind(this);\n    }\n\n    // Redux form/material-ui render address select component\n    static renderAddressInput({input, label, meta: { touched, error }, children, ...custom }) {\n        return (\n            <div>\n                <FormControl error={touched && error} fullWidth>\n                    <Select\n                        native\n                        {...input}\n                        {...custom}\n                        inputProps={{\n                            name: 'millionaireAddress',\n                            id: 'millionaire-address'\n                        }}\n                    >\n                        {children}\n                    </Select>\n                </FormControl>\n            </div>\n\n        )\n    }\n\n    // Redux form/material-ui render net worth text field component\n    static renderNetWorthInput({label, input, meta: { touched, invalid, error }, ...custom }) {\n        return (\n            <TextField\n                label={label}\n                type=\"number\"\n                placeholder={label}\n                error={touched && invalid}\n                helperText={touched && error}\n                {...input}\n                {...custom}\n                fullWidth\n            />\n        )\n    }\n\n    // Redux form callback when add millionaire info is submitted\n    async onAddMillionaire({ millionaireAddress, millionaireNetWorth } ) {\n        // Create compute task metadata\n        // computeTask(\n        //      fn - the signature of the function we are calling (Solidity-types, no spaces)\n        //      args - the args passed into our method w/ format [[arg_1, type_1], [arg_2, type_2], …, [arg_n, type_n]]\n        //      gasLimit - ENG gas units to be used for the computation task\n        //      gasPx - ENG gas price to be used for the computation task in grains format (10⁸)\n        //      sender - Ethereum address deploying the contract\n        //      scAddr - the secret contract address for which this computation task belongs to\n        // )\n        const taskFn = 'add_millionaire(address,uint256)';\n        const taskArgs = [\n            [millionaireAddress, 'address'],\n            [millionaireNetWorth, 'uint256'],\n        ];\n        const taskGasLimit = 10000000;\n        const taskGasPx = utils.toGrains(1e-7);\n        let task = await new Promise((resolve, reject) => {\n            this.props.enigma.computeTask(taskFn, taskArgs, taskGasLimit, taskGasPx, millionaireAddress,\n                this.props.deployedMillionairesProblem)\n                .on(eeConstants.SEND_TASK_INPUT_RESULT, (result) => resolve(result))\n                .on(eeConstants.ERROR, (error) => reject(error));\n        });\n        openSnackbar({ message: 'Task pending: adding millionaire' });\n        while (task.ethStatus === 1) {\n            // Poll for task record status and finality on Ethereum after worker has finished computation\n            task = await this.props.enigma.getTaskRecordStatus(task);\n            await sleep(1000);\n        }\n        // ethStatus === 2 means task has successfully been computed and commited on Ethereum\n        task.ethStatus === 2 ?\n            openSnackbar({ message: 'Task succeeded: added millionaire' })\n            :\n            openSnackbar({ message: 'Task failed: did not add millionaire' })\n        ;\n        this.props.reset('addMillionaire');\n    }\n\n    // Callback when compute richest button is clicked\n    async onComputeRichest() {\n        // Create compute task metadata\n        const taskFn = 'compute_richest()';\n        const taskArgs = [];\n        const taskGasLimit = 10000000;\n        const taskGasPx = utils.toGrains(1e-7);\n        let task = await new Promise((resolve, reject) => {\n            this.props.enigma.computeTask(taskFn, taskArgs, taskGasLimit, taskGasPx, this.props.accounts[0],\n                this.props.deployedMillionairesProblem)\n                .on(eeConstants.SEND_TASK_INPUT_RESULT, (result) => resolve(result))\n                .on(eeConstants.ERROR, (error) => reject(error));\n        });\n        openSnackbar({ message: 'Task pending: computing richest millionaire' });\n        while (task.ethStatus === 1) {\n            task = await this.props.enigma.getTaskRecordStatus(task);\n            await sleep(1000);\n        }\n        if (task.ethStatus === 2) {\n            openSnackbar({ message: 'Task succeeded: computed richest millionaire' });\n            // Get task result by passing in existing task - obtains the encrypted, abi-encoded output\n            task = await new Promise((resolve, reject) => {\n                this.props.enigma.getTaskResult(task)\n                    .on(eeConstants.GET_TASK_RESULT_RESULT, (result) => resolve(result))\n                    .on(eeConstants.ERROR, (error) => reject(error));\n            });\n            // Decrypt the task result - obtains the decrypted, abi-encoded output\n            task = await this.props.enigma.decryptTaskResult(task);\n            // Abi-decode the output to its desired components\n            const richestMillionaireAddress = this.props.enigma.web3.eth.abi.decodeParameters([{\n                type: 'address',\n                name: 'richestMillionaire',\n            }], task.decryptedOutput).richestMillionaire;\n            this.props.computeRichestMillionaire(richestMillionaireAddress);\n        } else {\n            openSnackbar({ message: 'Task failed: did not compute richest millionaire' });\n        }\n    }\n\n    render() {\n        if (this.props.deployedMillionairesProblem === null) {\n            return (\n                <div>\n                    <Message color=\"red\">Millionaires' Problem secret contract not yet deployed...</Message>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <h3>Millionaires Problem Secret Contract Address: {this.props.deployedMillionairesProblem}</h3>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <div>\n                            <Notifier />\n                            <h4>Enter Millionaire Details</h4>\n                            <form>\n                                <div>\n                                    <InputLabel htmlFor=\"millionaire-address\">Address</InputLabel>\n                                    <Field\n                                        name=\"millionaireAddress\"\n                                        component={MillionairesProblem.renderAddressInput}\n                                    >\n                                        <option value=\"\" />\n                                        {this.props.accounts.map((account, i) => {\n                                            return (\n                                                <option key={i} value={account}>{account}</option>\n                                            );\n                                        })}\n                                    </Field>\n                                </div>\n                                <div>\n                                    <Field\n                                        name=\"millionaireNetWorth\"\n                                        component={MillionairesProblem.renderNetWorthInput}\n                                        label=\"Net Worth\"\n                                    />\n                                </div>\n                                <br />\n                                <div>\n                                    <Button\n                                        onClick={this.props.handleSubmit(this.onAddMillionaire)}\n                                        variant='outlined'\n                                        color='secondary'>\n                                        Submit\n                                    </Button>\n                                </div>\n                            </form>\n                        </div>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <div>\n                            <h4>Richest Millionaire</h4>\n                            <p>\n                                {\n                                    this.props.richestMillionaire !== null ?\n                                        this.props.richestMillionaire\n                                        :\n                                        \"TBD\"\n                                }\n                            </p>\n                            <Button\n                                onClick={this.onComputeRichest}\n                                variant='contained'\n                                color='primary'>\n                                Compute Richest\n                            </Button>\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        enigma: state.enigma,\n        accounts: state.accounts,\n        deployedMillionairesProblem: state.deployedMillionairesProblem,\n        richestMillionaire: state.richestMillionaire\n    }\n};\nexport default connect(mapStateToProps, { computeRichestMillionaire })(reduxForm({\n    form: 'addMillionaire',\n})(MillionairesProblem));\n\n"]},"metadata":{},"sourceType":"module"}